"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GIModel_1 = require("./GIModel");
const common_1 = require("./common");
/**
 * Import obj
 */
function importObj(obj_str) {
    const model = new GIModel_1.GIModel();
    let EObjLine;
    (function (EObjLine) {
        EObjLine["OBJ_COMMENT"] = "#";
        EObjLine["OBJ_COORD"] = "v ";
        EObjLine["OBJ_TEXTURE"] = "vt ";
        EObjLine["OBJ_NORMAL"] = "vn ";
        EObjLine["OBJ_FACE"] = "f ";
        EObjLine["OBJ_LINE"] = "l ";
    })(EObjLine || (EObjLine = {}));
    const obj_lines = obj_str.split(/\r?\n/);
    const coords = [];
    const normals = [];
    const textures = [];
    const faces = [];
    const plines = [];
    for (const obj_line of obj_lines) {
        if (obj_line.startsWith(EObjLine.OBJ_COMMENT)) {
            // Do not do anything
        }
        else if (obj_line.startsWith(EObjLine.OBJ_COORD)) {
            const coord = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            coords.push(coord);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_TEXTURE)) {
            const normal = obj_line.split(' ').slice(1, 4).map(v => parseFloat(v));
            normals.push(normal);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_NORMAL)) {
            const texture = obj_line.split(' ').slice(1, 3).map(v => parseFloat(v));
            textures.push(texture);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_FACE)) {
            const face_strs = obj_line.split(' ').slice(1);
            const v_indexes = [];
            const t_indexes = [];
            const n_indexes = [];
            face_strs.forEach(face_str => {
                const face_sub_indexes = face_str.split('/').map(str => parseInt(str, 10) - 1);
                v_indexes.push(face_sub_indexes[0]);
                t_indexes.push(face_sub_indexes[1]);
                n_indexes.push(face_sub_indexes[2]);
            });
            faces.push([v_indexes, t_indexes, n_indexes]);
        }
        else if (obj_line.startsWith(EObjLine.OBJ_LINE)) {
            const pline = obj_line.split(' ').slice(1).map(v => parseInt(v, 10) - 1);
            plines.push(pline);
        }
        else {
            console.log('Found unrecognised line of data in OBJ file');
        }
    }
    for (const coord of coords) {
        const posi_i = model.geom.add.addPosi();
        model.attribs.add.setAttribValue(common_1.EEntType.POSI, posi_i, common_1.EAttribNames.COORDS, coord);
    }
    for (const face of faces) {
        console.log(face[0]);
        const face_i = model.geom.add.addPgon(face[0]);
        // TODO: texture uv
        // TODO: normals
    }
    return model;
}
exports.importObj = importObj;
/**
 * Export to obj
 */
function exportObj(model) {
    const h_str = '# File generated by Mobius.\n';
    // the order of data is 1) vertex, 2) texture, 3) normal
    let v_str = '';
    let vt_str = '';
    let vn_str = '';
    let f_str = '';
    let l_str = '';
    // do we have color, texture, normal?
    const has_color_attrib = model.attribs.query.hasAttrib(common_1.EEntType.VERT, common_1.EAttribNames.COLOUR);
    const has_normal_attrib = model.attribs.query.hasAttrib(common_1.EEntType.VERT, common_1.EAttribNames.NORMAL);
    const has_texture_attrib = model.attribs.query.hasAttrib(common_1.EEntType.VERT, common_1.EAttribNames.TEXTURE);
    const posis_i = model.geom.query.getEnts(common_1.EEntType.POSI, false);
    const verts_i = model.geom.query.getEnts(common_1.EEntType.VERT, false);
    // positions
    if (has_color_attrib) {
        for (const vert_i of verts_i) {
            const color = model.attribs.query.getAttribValue(common_1.EEntType.VERT, common_1.EAttribNames.COLOUR, vert_i);
            const coord = model.attribs.query.getVertCoords(vert_i);
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + color.map(c => c.toString()).join(' ') + '\n';
        }
    }
    else {
        for (const posi_i of posis_i) {
            const coord = model.attribs.query.getPosiCoords(posi_i);
            v_str += 'v ' + coord.map(v => v.toString()).join(' ') + '\n';
        }
    }
    // textures, vt
    if (has_texture_attrib) {
        for (const vert_i of verts_i) {
            const texture = model.attribs.query.getAttribValue(common_1.EEntType.VERT, common_1.EAttribNames.TEXTURE, vert_i);
            vt_str += 'v ' + texture.map(v => v.toString()).join(' ') + '\n';
        }
    }
    // normals, vn
    if (has_normal_attrib) {
        for (const vert_i of verts_i) {
            const normal = model.attribs.query.getAttribValue(common_1.EEntType.VERT, common_1.EAttribNames.NORMAL, vert_i);
            vn_str += 'v ' + normal.map(v => v.toString()).join(' ') + '\n';
        }
    }
    // polygons, f
    const pgons_i = model.geom.query.getEnts(common_1.EEntType.PGON, false);
    for (const pgon_i of pgons_i) {
        const pgon_verts_i_outer = model.geom.query.navAnyToVert(common_1.EEntType.PGON, pgon_i);
        // const verts_i_outer = verts_i[0];
        // TODO what about holes
        if (has_texture_attrib) {
            // TODO
        }
        if (has_normal_attrib) {
            // TODO
        }
        if (has_color_attrib) {
            f_str += 'f ' + pgon_verts_i_outer.map(vert_i => (vert_i + 1).toString()).join(' ') + '\n';
        }
        else {
            f_str += 'f ' + pgon_verts_i_outer.map(vert_i => (model.geom.query.navVertToPosi(vert_i) + 1).toString()).join(' ') + '\n';
        }
    }
    // polylines, l
    const plines_i = model.geom.query.getEnts(common_1.EEntType.PLINE, false);
    for (const pline_i of plines_i) {
        const pline_verts_i = model.geom.query.navAnyToVert(common_1.EEntType.PLINE, pline_i);
        l_str += 'l ' + pline_verts_i.map(vert_i => (vert_i + 1).toString()).join(' ') + '\n';
    }
    // result
    return h_str + v_str + v_str + vt_str + vn_str + f_str + l_str;
}
exports.exportObj = exportObj;
//# sourceMappingURL=data:application/json;base64,