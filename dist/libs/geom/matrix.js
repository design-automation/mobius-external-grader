"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const three = __importStar(require("three"));
const vectors_1 = require("./vectors");
const id_1 = require("../geo-info/id");
const EPS = 1e-6;
function multMatrix(xyz, m) {
    const v2 = new three.Vector3(...xyz);
    v2.applyMatrix4(m);
    return v2.toArray();
}
exports.multMatrix = multMatrix;
function mirrorMatrix(origin, normal) {
    // plane normal
    const [a, b, c] = vectors_1.vecNorm(normal);
    // rotation matrix
    const matrix_mirror = new three.Matrix4();
    matrix_mirror.set(1 - (2 * a * a), -2 * a * b, -2 * a * c, 0, -2 * a * b, 1 - (2 * b * b), -2 * b * c, 0, -2 * a * c, -2 * b * c, 1 - (2 * c * c), 0, 0, 0, 0, 1);
    // translation matrix
    const matrix_trn1 = new three.Matrix4();
    matrix_trn1.makeTranslation(-origin[0], -origin[1], -origin[2]);
    const matrix_trn2 = new three.Matrix4();
    matrix_trn2.makeTranslation(origin[0], origin[1], origin[2]);
    // final matrix
    const move_mirror_move = matrix_trn2.multiply(matrix_mirror.multiply(matrix_trn1));
    // do the xform
    return move_mirror_move;
}
exports.mirrorMatrix = mirrorMatrix;
function rotateMatrix(origin, axis, angle) {
    // norm the axis
    axis = vectors_1.vecNorm(axis);
    // rotation matrix
    const matrix_rot = new three.Matrix4();
    matrix_rot.makeRotationAxis(new three.Vector3(...axis), angle);
    // translation matrix
    const matrix_trn1 = new three.Matrix4();
    matrix_trn1.makeTranslation(-origin[0], -origin[1], -origin[2]);
    const matrix_trn2 = new three.Matrix4();
    matrix_trn2.makeTranslation(origin[0], origin[1], origin[2]);
    // final matrix
    const move_rot_move = matrix_trn2.multiply(matrix_rot.multiply(matrix_trn1));
    // do the xform
    return move_rot_move;
}
exports.rotateMatrix = rotateMatrix;
function scaleMatrix(origin, factor) {
    // scale matrix
    const matrix_scale = new three.Matrix4();
    matrix_scale.makeScale(factor[0], factor[1], factor[2]);
    // xform matrix
    const source_plane = (id_1.getArrDepth(origin) === 2 ? origin : [origin, [1, 0, 0], [0, 1, 0]]);
    const matrix_xform1 = _xformMatrixFromXYZVectors(source_plane[0], source_plane[1], source_plane[2], true);
    const matrix_xform2 = _xformMatrixFromXYZVectors(source_plane[0], source_plane[1], source_plane[2], false);
    // final matrix
    const xform_scale_xform = matrix_xform2.multiply(matrix_scale.multiply(matrix_xform1));
    // do the xform
    return xform_scale_xform;
}
exports.scaleMatrix = scaleMatrix;
function xfromSourceTargetMatrix(source_plane, target_plane) {
    // matrix to xform from source to gcs, then from gcs to target
    const matrix_source_to_gcs = _xformMatrixFromXYZVectors(source_plane[0], source_plane[1], source_plane[2], true);
    const matrix_gcs_to_target = _xformMatrixFromXYZVectors(target_plane[0], target_plane[1], target_plane[2], false);
    // final matrix
    const xform = matrix_gcs_to_target.multiply(matrix_source_to_gcs);
    // return the matrix
    return xform;
}
exports.xfromSourceTargetMatrix = xfromSourceTargetMatrix;
// ================================================================================================
// Helper functions
// ================================================================================================
function _crossVectors(v1, v2, norm = false) {
    const v3 = new three.Vector3();
    v3.crossVectors(v1, v2);
    if (norm) {
        v3.normalize();
    }
    return v3;
}
function _dotVectors(v1, v2) {
    return v1.dot(v2);
}
function _xformMatrixFromXYZVectors(o, xaxis, xyplane, neg) {
    const x_vec = new three.Vector3(...xaxis).normalize();
    const xyplane_vec = new three.Vector3(...xyplane).normalize();
    const z_vec = _crossVectors(x_vec, xyplane_vec);
    const y_vec = _crossVectors(z_vec, x_vec);
    if (neg) {
        return _xformMatrixNeg(new three.Vector3(...o), x_vec, y_vec);
    }
    return xformMatrixPos(new three.Vector3(...o), x_vec, y_vec);
}
function _xformMatrixNeg(o, x, y) {
    const m1 = new three.Matrix4();
    const o_neg = o.clone().negate();
    m1.setPosition(o_neg);
    const m2 = new three.Matrix4();
    m2.makeBasis(x.normalize(), y.normalize(), _crossVectors(x, y, true));
    m2.getInverse(m2);
    const m3 = new three.Matrix4();
    // first translate to (0,0,0), then xform, so m1 x m2
    m3.multiplyMatrices(m2, m1);
    return m3;
}
function xformMatrixPos(o, x, y) {
    const m1 = new three.Matrix4();
    m1.setPosition(o);
    const m2 = new three.Matrix4();
    m2.makeBasis(x.normalize(), y.normalize(), _crossVectors(x, y, true));
    const m3 = new three.Matrix4();
    // first xform, then translate to origin, so m1 x m2
    m3.multiplyMatrices(m1, m2);
    return m3;
}
// ---------------------------------------------------------------------------------
function _matrixFromXYZ(pts, from_origin, from_vectors, to_origin, to_vectors) {
    const e1 = new three.Vector3(from_vectors[0][0]).normalize();
    const e2 = new three.Vector3(from_vectors[0][1]).normalize();
    const e3 = new three.Vector3(from_vectors[0][2]).normalize();
    const b1 = new three.Vector3(to_vectors[0][0]).normalize();
    const b2 = new three.Vector3(to_vectors[0][1]).normalize();
    const b3 = new three.Vector3(to_vectors[0][2]).normalize();
    if (e1.dot(e2) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    if (e1.dot(e3) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    if (e2.dot(e3) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    if (b1.dot(b2) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    if (b1.dot(b3) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    if (b2.dot(b3) === 0) {
        throw new Error('Orthonormal initial basis required');
    }
    const matrix = new three.Matrix3();
    matrix.set(e1.dot(b1), e1.dot(b2), e1.dot(b3), e2.dot(b1), e2.dot(b2), e2.dot(b3), e3.dot(b1), e3.dot(b2), e3.dot(b3));
    const t_x = to_origin[0] - from_origin[0];
    const t_y = to_origin[1] - from_origin[1];
    const t_z = to_origin[2] - from_origin[2];
    return [[e1.dot(b1), e1.dot(b2), e1.dot(b3), t_x],
        [e2.dot(b1), e2.dot(b2), e2.dot(b3), t_y],
        [e3.dot(b1), e3.dot(b2), e3.dot(b3), t_z],
        [0, 0, 0, 1]];
}
//# sourceMappingURL=data:application/json;base64,